// Mocks generated by Mockito 5.4.2 from annotations
// in flutter_robinhood_siravit/test/units/todo/todo_controller_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:ui' as _i9;

import 'package:flutter/animation.dart' as _i6;
import 'package:flutter/src/widgets/scroll_context.dart' as _i8;
import 'package:flutter/src/widgets/scroll_controller.dart' as _i4;
import 'package:flutter/src/widgets/scroll_physics.dart' as _i7;
import 'package:flutter/src/widgets/scroll_position.dart' as _i2;
import 'package:infinite_scroll_pagination/src/core/paging_controller.dart'
    as _i10;
import 'package:infinite_scroll_pagination/src/model/paging_state.dart' as _i3;
import 'package:infinite_scroll_pagination/src/model/paging_status.dart'
    as _i12;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i11;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeScrollPosition_0 extends _i1.SmartFake
    implements _i2.ScrollPosition {
  _FakeScrollPosition_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePagingState_1<PageKeyType1, ItemType1> extends _i1.SmartFake
    implements _i3.PagingState<PageKeyType1, ItemType1> {
  _FakePagingState_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ScrollController].
///
/// See the documentation for Mockito's code generation for more information.
class MockScrollController extends _i1.Mock implements _i4.ScrollController {
  @override
  bool get keepScrollOffset => (super.noSuchMethod(
        Invocation.getter(#keepScrollOffset),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  double get initialScrollOffset => (super.noSuchMethod(
        Invocation.getter(#initialScrollOffset),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);

  @override
  Iterable<_i2.ScrollPosition> get positions => (super.noSuchMethod(
        Invocation.getter(#positions),
        returnValue: <_i2.ScrollPosition>[],
        returnValueForMissingStub: <_i2.ScrollPosition>[],
      ) as Iterable<_i2.ScrollPosition>);

  @override
  bool get hasClients => (super.noSuchMethod(
        Invocation.getter(#hasClients),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i2.ScrollPosition get position => (super.noSuchMethod(
        Invocation.getter(#position),
        returnValue: _FakeScrollPosition_0(
          this,
          Invocation.getter(#position),
        ),
        returnValueForMissingStub: _FakeScrollPosition_0(
          this,
          Invocation.getter(#position),
        ),
      ) as _i2.ScrollPosition);

  @override
  double get offset => (super.noSuchMethod(
        Invocation.getter(#offset),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i5.Future<void> animateTo(
    double? offset, {
    required Duration? duration,
    required _i6.Curve? curve,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #animateTo,
          [offset],
          {
            #duration: duration,
            #curve: curve,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void jumpTo(double? value) => super.noSuchMethod(
        Invocation.method(
          #jumpTo,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void attach(_i2.ScrollPosition? position) => super.noSuchMethod(
        Invocation.method(
          #attach,
          [position],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void detach(_i2.ScrollPosition? position) => super.noSuchMethod(
        Invocation.method(
          #detach,
          [position],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.ScrollPosition createScrollPosition(
    _i7.ScrollPhysics? physics,
    _i8.ScrollContext? context,
    _i2.ScrollPosition? oldPosition,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #createScrollPosition,
          [
            physics,
            context,
            oldPosition,
          ],
        ),
        returnValue: _FakeScrollPosition_0(
          this,
          Invocation.method(
            #createScrollPosition,
            [
              physics,
              context,
              oldPosition,
            ],
          ),
        ),
        returnValueForMissingStub: _FakeScrollPosition_0(
          this,
          Invocation.method(
            #createScrollPosition,
            [
              physics,
              context,
              oldPosition,
            ],
          ),
        ),
      ) as _i2.ScrollPosition);

  @override
  void debugFillDescription(List<String>? description) => super.noSuchMethod(
        Invocation.method(
          #debugFillDescription,
          [description],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i9.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i9.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [PagingController].
///
/// See the documentation for Mockito's code generation for more information.
class MockPagingController<PageKeyType, ItemType> extends _i1.Mock
    implements _i10.PagingController<PageKeyType, ItemType> {
  @override
  PageKeyType get firstPageKey => (super.noSuchMethod(
        Invocation.getter(#firstPageKey),
        returnValue: _i11.dummyValue<PageKeyType>(
          this,
          Invocation.getter(#firstPageKey),
        ),
        returnValueForMissingStub: _i11.dummyValue<PageKeyType>(
          this,
          Invocation.getter(#firstPageKey),
        ),
      ) as PageKeyType);

  @override
  set itemList(List<ItemType>? newItemList) => super.noSuchMethod(
        Invocation.setter(
          #itemList,
          newItemList,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set error(dynamic newError) => super.noSuchMethod(
        Invocation.setter(
          #error,
          newError,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set nextPageKey(PageKeyType? newNextPageKey) => super.noSuchMethod(
        Invocation.setter(
          #nextPageKey,
          newNextPageKey,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set value(_i3.PagingState<PageKeyType, ItemType>? newValue) =>
      super.noSuchMethod(
        Invocation.setter(
          #value,
          newValue,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.PagingState<PageKeyType, ItemType> get value => (super.noSuchMethod(
        Invocation.getter(#value),
        returnValue: _FakePagingState_1<PageKeyType, ItemType>(
          this,
          Invocation.getter(#value),
        ),
        returnValueForMissingStub: _FakePagingState_1<PageKeyType, ItemType>(
          this,
          Invocation.getter(#value),
        ),
      ) as _i3.PagingState<PageKeyType, ItemType>);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void appendPage(
    List<ItemType>? newItems,
    PageKeyType? nextPageKey,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #appendPage,
          [
            newItems,
            nextPageKey,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void appendLastPage(List<ItemType>? newItems) => super.noSuchMethod(
        Invocation.method(
          #appendLastPage,
          [newItems],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void retryLastFailedRequest() => super.noSuchMethod(
        Invocation.method(
          #retryLastFailedRequest,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void refresh() => super.noSuchMethod(
        Invocation.method(
          #refresh,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addStatusListener(_i10.PagingStatusListener? listener) =>
      super.noSuchMethod(
        Invocation.method(
          #addStatusListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeStatusListener(_i10.PagingStatusListener? listener) =>
      super.noSuchMethod(
        Invocation.method(
          #removeStatusListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyStatusListeners(_i12.PagingStatus? status) => super.noSuchMethod(
        Invocation.method(
          #notifyStatusListeners,
          [status],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addPageRequestListener(
          _i10.PageRequestListener<PageKeyType>? listener) =>
      super.noSuchMethod(
        Invocation.method(
          #addPageRequestListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removePageRequestListener(
          _i10.PageRequestListener<PageKeyType>? listener) =>
      super.noSuchMethod(
        Invocation.method(
          #removePageRequestListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyPageRequestListeners(PageKeyType? pageKey) => super.noSuchMethod(
        Invocation.method(
          #notifyPageRequestListeners,
          [pageKey],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i9.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i9.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
